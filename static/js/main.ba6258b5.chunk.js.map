{"version":3,"sources":["utils/useElementSize.js","utils/useDiceLifeTimer.js","utils/utils.js","utils/constants.js","ui/Dice/Dice.jsx","ui/Stage/Stage.jsx","ui/ScoreTable/ScoreTable.jsx","ui/Timer/Timer.jsx","ui/Dashboard/Dashboard.jsx","services/localStorageService.js","App.js","index.js"],"names":["useElementSize","element","useState","size","setSize","resizeHandler","clientWidth","clientHeight","useEffect","window","addEventListener","removeEventListener","useDiceLifeTimer","lifeTime","delay","onFinish","pause","timers","setTimers","startTime","setStartTime","clearTimers","forEach","timer","clearTimeout","saveTimersStates","Date","getTime","delayTimerId","dissaperTimerId","setTimeout","getRandom","min","max","Math","random","getMagnitude","point0","x","y","point1","sqrt","pow","DEFAULT_PLAYER_NAME","Dice","props","points","pos","onDisappear","freeze","scaleRatio","onClick","color","diceRef","React","createRef","dicePointsRef","isClicked","setClickedState","isVisible","setVisability","diceElement","current","style","animationPlayState","diceStyles","backgroundColor","left","top","width","height","diceClasses","clickHandler","e","preventDefault","classList","add","ref","onTouchStart","onAnimationEnd","className","diceTypes","diceRandomWeight","Stage","isActive","shouldReplay","onScoreChange","stageRef","useRef","dicePool","updatePool","stageSize","generateSpawnPos","diceSize","inCheck","attemptsCount","some","DICE_SIZE","createDices","displayedDiceCount","length","newDices","Array","fill","map","diceWeight","diceTypeIndex","findIndex","weightGroup","id","createDiceModel","poolState","gameTimer","setInterval","clearInterval","diceElements","diceModel","key","diceId","pool","filter","xs","md","bordered","bodyStyle","padding","columns","title","dataIndex","ellipsis","defaultSortOrder","sorter","a","b","score","ScoreTable","data","defaultPageSize","dataSource","Timer","start","end","onTimeOver","replay","time","setTime","tid","currentTime","newTime","updateTimer","value","Dashboard","onStart","onReplay","onEnd","gameIsActive","gutter","sm","type","icon","PauseOutlined","CaretRightOutlined","UndoOutlined","href","SolutionOutlined","SCORES_KEY","formatScores","scores","JSON","parse","stringify","App","isVisibleModal","setModelVisability","modalInput","updateModalInput","scoreList","setScoreList","setScore","toggleGame","replayGame","localStorage","getItem","replayHandler","handleModalCancel","location","split","originURI","history","replaceState","removeHashURI","state","scoreState","visible","maskClosable","closable","onOk","name","newScore","newScoresTable","setItem","addScores","onCancel","maxLength","onChange","target","trim","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ba6258b5.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst useElementSize = (element) => {\r\n  const [size, setSize] = useState([320, 300]);\r\n\r\n  const resizeHandler = () => {\r\n    if (!element) return;\r\n\r\n    setSize([element.clientWidth, element.clientHeight]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", resizeHandler);\r\n    resizeHandler();\r\n    return () => window.removeEventListener(\"resize\", resizeHandler);\r\n  }, [element]);\r\n\r\n  return size;\r\n};\r\n\r\nexport default useElementSize;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst useDiceLifeTimer = (lifeTime, delay, onFinish, pause = false) => {\r\n  const [timers, setTimers] = useState({ lifeTime, delay });\r\n  const [startTime, setStartTime] = useState(0);\r\n\r\n  const clearTimers = (timers = []) => timers.forEach((timer) => clearTimeout(timer));\r\n\r\n  const saveTimersStates = () => {\r\n    setTimers(({ lifeTime, delay }) => ({\r\n      lifeTime: lifeTime - (new Date().getTime() - startTime),\r\n      delay: delay - (new Date().getTime() - startTime),\r\n    }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    let delayTimerId, dissaperTimerId;\r\n\r\n    delayTimerId = setTimeout(() => {\r\n      setStartTime(new Date().getTime());\r\n      dissaperTimerId = setTimeout(() => {\r\n        onFinish();\r\n        clearTimeout(dissaperTimerId);\r\n      }, timers.lifeTime);\r\n    }, timers.delay);\r\n\r\n    if (pause) {\r\n      // Removing timers for every pause and saving elapsed lifetime for recreate\r\n      clearTimers([delayTimerId, dissaperTimerId]);\r\n      saveTimersStates();\r\n    }\r\n\r\n    // Remove timers before destroy\r\n    return () => {\r\n      clearTimers([delayTimerId, dissaperTimerId]);\r\n    };\r\n  }, [pause]);\r\n};\r\n\r\nexport default useDiceLifeTimer;\r\n","const getRandom = (min, max) => Math.random() * (max - min) + min;\r\n\r\nconst getMagnitude = (point0 = { x: 0, y: 0 }, point1 = { x: 0, y: 0 }) => {\r\n  return Math.sqrt(Math.pow(point0.x - point1.x, 2) + Math.pow(point0.y - point1.y, 2));\r\n};\r\n\r\nconst removeHashURI = () => {\r\n  const [originURI] = window.location.href.split(\"#\");\r\n  window.history.replaceState(null, null, originURI);\r\n};\r\n\r\nconst getRandomColor = () => `rgb(${getRandom(0, 255)}, ${getRandom(0, 255)}, ${getRandom(0, 255)})`;\r\n\r\nexport { getMagnitude, getRandom, removeHashURI, getRandomColor };\r\n","// Dice blocks constants\r\nexport const DICE_SIZE = 50;\r\nexport const DICE_CLICK_COLOR = \"#ff0000\";\r\nexport const DICE_POOL_SIZE = 4;\r\nexport const DELAY_MIN_TIME = 10;\r\nexport const DELAY_MAX_TIME = 500;\r\nexport const LIFE_MIN_TIME = 1000;\r\nexport const LIFE_MAX_TIME = 2000;\r\n\r\n// Game lifecycle constants\r\nexport const TIME_PER_FRAME = 1000 / 60;\r\nexport const GAME_START_TIME = 60;\r\nexport const GAME_END_TIME = 0;\r\n\r\n// Modal window constants\r\nexport const DEFAULT_PLAYER_NAME = \"Anonymous\";\r\nexport const NAME_MAX_LENGTH = 32;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useDiceLifeTimer } from \"utils\";\r\nimport { DICE_SIZE, DICE_CLICK_COLOR } from \"utils/constants\";\r\n\r\nconst Dice = (props) => {\r\n  const { lifeTime = 1000, points, delay = 10, pos, onDisappear, freeze, scaleRatio, onClick, color } = props;\r\n  const diceRef = React.createRef();\r\n  const dicePointsRef = React.createRef();\r\n  const [isClicked, setClickedState] = useState(false);\r\n  const [isVisible, setVisability] = useState(true);\r\n\r\n  // Hook that controll a dice lifecycle\r\n  useDiceLifeTimer(lifeTime, delay, () => setVisability(false), freeze);\r\n\r\n  useEffect(() => {\r\n    const diceElement = diceRef.current;\r\n    if (!freeze && (isVisible || !isVisible)) {\r\n      diceElement.style.animationPlayState = \"running\";\r\n    } else if (freeze && (isVisible || !isVisible)) {\r\n      diceElement.style.animationPlayState = \"paused\";\r\n    }\r\n  }, [freeze, diceRef, isVisible]);\r\n\r\n  const animationEndHandler = () => {\r\n    if (onDisappear && !isVisible) {\r\n      onDisappear();\r\n    }\r\n  };\r\n\r\n  const diceStyles = {\r\n    backgroundColor: color,\r\n    left: pos.x,\r\n    top: pos.y,\r\n    width: DICE_SIZE / scaleRatio,\r\n    height: DICE_SIZE / scaleRatio,\r\n  };\r\n  const diceClasses = `dice ${isVisible ? \"dice_appear\" : \"dice_disappear\"}`;\r\n\r\n  const clickHandler = (e) => {\r\n    // prevent text selection\r\n    e.preventDefault();\r\n    if (freeze || isClicked) return;\r\n\r\n    diceRef.current.style.backgroundColor = DICE_CLICK_COLOR;\r\n    setClickedState(true);\r\n    setVisability(false);\r\n    onClick(points);\r\n    dicePointsRef.current.classList.add(\"dice__points_show\");\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={diceRef}\r\n      onClick={clickHandler}\r\n      onTouchStart={clickHandler}\r\n      onAnimationEnd={animationEndHandler}\r\n      style={diceStyles}\r\n      className={diceClasses}\r\n    >\r\n      <span ref={dicePointsRef} className=\"dice__points\">\r\n        + {points}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dice;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport Dice from \"ui/Dice\";\r\nimport { Col, Card } from \"antd\";\r\nimport { useElementSize, getRandom, getMagnitude, getRandomColor } from \"utils\";\r\nimport {\r\n  DICE_POOL_SIZE,\r\n  DICE_SIZE,\r\n  DELAY_MIN_TIME,\r\n  DELAY_MAX_TIME,\r\n  LIFE_MIN_TIME,\r\n  LIFE_MAX_TIME,\r\n  TIME_PER_FRAME,\r\n} from \"utils/constants\";\r\n\r\nconst diceTypes = [\r\n  { points: 3, scaleRatio: 4 },\r\n  { points: 2, scaleRatio: 2 },\r\n  { points: 1, scaleRatio: 1 },\r\n];\r\n// small: 0-15, middle: 16-50, large: 51-100\r\nconst diceRandomWeight = [15, 50, 100];\r\n\r\nconst Stage = ({ isActive, shouldReplay, onScoreChange }) => {\r\n  const stageRef = useRef(null);\r\n  const [dicePool, updatePool] = useState([]);\r\n  const stageSize = useElementSize(stageRef.current);\r\n\r\n  const disappearHandler = (diceId) => () => updatePool((pool) => pool.filter(({ id }) => id !== diceId));\r\n\r\n  const generateSpawnPos = (scaleRatio) => {\r\n    const diceSize = DICE_SIZE / scaleRatio;\r\n    let inCheck = true;\r\n    let attemptsCount = 20;\r\n    let x, y;\r\n    do {\r\n      const [width, height] = stageSize;\r\n      [x, y] = [getRandom(0, width - diceSize), getRandom(0, height - diceSize)];\r\n      inCheck = dicePool.some(({ pos }) => getMagnitude(pos, { x, y }) < DICE_SIZE * 1.5);\r\n    } while (inCheck || --attemptsCount);\r\n    return { x, y };\r\n  };\r\n\r\n  const createDiceModel = () => {\r\n    const [delay, lifeTime] = [getRandom(DELAY_MIN_TIME, DELAY_MAX_TIME), getRandom(LIFE_MIN_TIME, LIFE_MAX_TIME)];\r\n    const diceWeight = getRandom(0, 100);\r\n    const diceTypeIndex = diceRandomWeight.findIndex((weightGroup) => diceWeight <= weightGroup);\r\n    const { points, scaleRatio } = diceTypes[diceTypeIndex];\r\n    return {\r\n      id: delay + lifeTime,\r\n      points,\r\n      color: getRandomColor(),\r\n      scaleRatio,\r\n      pos: generateSpawnPos(scaleRatio),\r\n      delay,\r\n      lifeTime,\r\n    };\r\n  };\r\n\r\n  const createDices = () => {\r\n    const displayedDiceCount = dicePool.length;\r\n    if (displayedDiceCount < DICE_POOL_SIZE) {\r\n      const newDices = Array(DICE_POOL_SIZE - displayedDiceCount)\r\n        .fill(null)\r\n        .map(() => createDiceModel());\r\n      updatePool((poolState) => [...poolState, ...newDices]);\r\n    }\r\n  };\r\n\r\n  const gameLoop = () => {\r\n    if (shouldReplay) updatePool([]);\r\n    if (isActive) {\r\n      createDices();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const gameTimer = setInterval(() => {\r\n      gameLoop();\r\n    }, TIME_PER_FRAME);\r\n    return () => clearInterval(gameTimer);\r\n  }, [dicePool, isActive, shouldReplay]);\r\n\r\n  const diceElements = dicePool.map((diceModel) => {\r\n    return (\r\n      <Dice\r\n        onClick={onScoreChange}\r\n        {...diceModel}\r\n        key={diceModel.id}\r\n        freeze={!isActive}\r\n        onDisappear={disappearHandler(diceModel.id)}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Col xs={24} md={18}>\r\n      <Card bordered={false} bodyStyle={{ padding: \"6px 12px\" }}>\r\n        <section ref={stageRef} className=\"stage\">\r\n          {diceElements}\r\n        </section>\r\n      </Card>\r\n    </Col>\r\n  );\r\n};\r\nexport default Stage;\r\n","import React from \"react\";\r\nimport { Table, Col, Card } from \"antd\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    dataIndex: \"name\",\r\n    key: \"name\",\r\n    ellipsis: true,\r\n  },\r\n  {\r\n    title: \"Score\",\r\n    dataIndex: \"score\",\r\n    key: \"score\",\r\n    defaultSortOrder: \"descend\",\r\n    sorter: (a, b) => a.score - b.score,\r\n  },\r\n];\r\n\r\nconst ScoreTable = ({ data = [] }) => {\r\n  return (\r\n    <Col xs={24} md={6}>\r\n      <Card bordered={false} bodyStyle={{ padding: \"6px 12px\" }}>\r\n        <section id=\"scores\" className=\"score-table\">\r\n          <Table columns={columns} defaultPageSize={5} dataSource={data} bordered={true} size=\"small\" />\r\n        </section>\r\n      </Card>\r\n    </Col>\r\n  );\r\n};\r\n\r\nexport default ScoreTable;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Statistic } from \"antd\";\r\n\r\nconst Timer = ({ start = 0, end = 60, onTimeOver, isActive, replay }) => {\r\n  const [time, setTime] = useState(start);\r\n\r\n  const updateTimer = (tid) => {\r\n    if (!isActive) return;\r\n    setTime((currentTime) => {\r\n      // two in one: countdown and regular timer\r\n      const newTime = currentTime + (end < start ? -1 : 1);\r\n      if (end < start ? newTime < end : newTime > end) {\r\n        clearInterval(tid);\r\n        return end;\r\n      }\r\n      return newTime;\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (replay) {\r\n      setTime(start);\r\n    }\r\n    if (time === end) {\r\n      setTime(start);\r\n      onTimeOver();\r\n    }\r\n  }, [time, replay]);\r\n\r\n  useEffect(() => {\r\n    let tid;\r\n\r\n    tid = setInterval(() => updateTimer(tid), 1000);\r\n    return () => clearInterval(tid);\r\n  }, [start, isActive]);\r\n\r\n  return <Statistic title=\"Time:\" value={time} />;\r\n};\r\n\r\nexport default Timer;\r\n","import React from \"react\";\r\nimport { CaretRightOutlined, UndoOutlined, PauseOutlined, SolutionOutlined } from \"@ant-design/icons\";\r\nimport { GAME_START_TIME, GAME_END_TIME } from \"utils/constants\";\r\nimport Timer from \"ui/Timer\";\r\nimport { Row, Col, Button, Statistic, Card, Space } from \"antd\";\r\n\r\nconst Dashboard = ({ onStart, onReplay, onEnd, replay, gameIsActive, score }) => {\r\n  return (\r\n    <header className=\"dashboard\">\r\n      <Row gutter={32}>\r\n        <Col xs={24} sm={12} md={8}>\r\n          <Card bordered={false} bodyStyle={{ padding: \"6px 12px\" }}>\r\n            <Space className=\"dashboard__controls\">\r\n              <Button onClick={onStart} type=\"primary\" icon={gameIsActive ? <PauseOutlined /> : <CaretRightOutlined />}>\r\n                {gameIsActive ? \"Pause\" : \"Play\"}\r\n              </Button>\r\n              <Button onClick={onReplay} icon={<UndoOutlined />}>\r\n                Replay\r\n              </Button>\r\n              <Button className=\"dashboard__scores-link\" href=\"#scores\" icon={<SolutionOutlined />}>\r\n                Scores\r\n              </Button>\r\n            </Space>\r\n          </Card>\r\n        </Col>\r\n        <Col xs={12} sm={6} md={8}>\r\n          <Card bordered={false} bodyStyle={{ padding: \"6px 12px\" }}>\r\n            <Statistic title=\"Points:\" value={score} />\r\n          </Card>\r\n        </Col>\r\n        <Col xs={12} sm={6} md={8}>\r\n          <Card bordered={false} bodyStyle={{ padding: \"6px 12px\" }}>\r\n            <Timer\r\n              start={GAME_START_TIME}\r\n              end={GAME_END_TIME}\r\n              isActive={gameIsActive}\r\n              onTimeOver={onEnd}\r\n              replay={replay}\r\n            />\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","const SCORES_KEY = \"scores\";\r\n\r\nconst addScores = (scores = []) => localStorage.setItem(SCORES_KEY, formatScores(scores));\r\n\r\nconst getScores = () => formatScores(localStorage.getItem(SCORES_KEY)) || [];\r\n\r\nconst formatScores = (scores) => {\r\n  try {\r\n    return JSON.parse(scores);\r\n  } catch (e) {\r\n    return JSON.stringify(scores);\r\n  }\r\n};\r\n\r\nexport { addScores, getScores };\r\n","import React, { useState, useEffect } from \"react\";\nimport { Modal, Row } from \"antd\";\nimport Stage from \"./ui/Stage\";\nimport ScoreTable from \"./ui/ScoreTable\";\nimport Dashboard from \"ui/Dashboard\";\nimport { addScores, getScores } from \"services/localStorageService\";\nimport { DEFAULT_PLAYER_NAME, NAME_MAX_LENGTH } from \"utils/constants\";\nimport { removeHashURI } from \"utils\";\n\nexport default function App() {\n  const [isVisibleModal, setModelVisability] = useState(false);\n  const [modalInput, updateModalInput] = useState(DEFAULT_PLAYER_NAME);\n\n  const [scoreList, setScoreList] = useState([]);\n  const [score, setScore] = useState(0);\n  const [gameIsActive, toggleGame] = useState(false);\n  const [shouldReplay, replayGame] = useState(false);\n\n  useEffect(() => {\n    setScoreList(getScores());\n  }, []);\n\n  const startHandler = () => {\n    removeHashURI();\n    toggleGame((state) => !state);\n    replayGame(false);\n  };\n\n  const replayHandler = () => {\n    if (shouldReplay) return;\n    replayGame(true);\n    toggleGame(false);\n    setScore(0);\n  };\n\n  const gameOverHandler = () => {\n    setModelVisability(true);\n  };\n\n  const scoreChangeHandler = (value) => setScore((scoreState) => value + scoreState);\n\n  const handleModalCancel = () => {\n    replayHandler();\n    setModelVisability(false);\n  };\n  const handleModalOk = () => {\n    handleModalCancel();\n    const name = modalInput ? modalInput : DEFAULT_PLAYER_NAME;\n    const newScore = { key: new Date().getTime(), name, score };\n\n    setScoreList((scores) => {\n      const newScoresTable = [...scores, newScore];\n      addScores(newScoresTable);\n      return newScoresTable;\n    });\n  };\n\n  return (\n    <>\n      <Dashboard\n        score={score}\n        gameIsActive={gameIsActive}\n        replay={shouldReplay}\n        onStart={startHandler}\n        onReplay={replayHandler}\n        onEnd={gameOverHandler}\n      />\n      <Row gutter={{ sm: 16, md: 24 }} className=\"content\">\n        <Stage onScoreChange={scoreChangeHandler} isActive={gameIsActive} shouldReplay={shouldReplay} />\n        <ScoreTable data={scoreList} />\n      </Row>\n      <Modal\n        className=\"modal\"\n        title=\"Save result\"\n        visible={isVisibleModal}\n        maskClosable={false}\n        closable={false}\n        onOk={handleModalOk}\n        onCancel={handleModalCancel}\n      >\n        <div className=\"modal__inner\">\n          <div className=\"modal__score\">\n            <p className=\"modal__text\">Youre score: </p>\n            <span>{score}</span>\n          </div>\n          <p className=\"modal__text\">Name:</p>\n          <input\n            className=\"modal__input\"\n            value={modalInput}\n            maxLength={NAME_MAX_LENGTH}\n            onChange={({ target }) => updateModalInput(target.value.trim())}\n          />\n        </div>\n      </Modal>\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/normalize.css\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}